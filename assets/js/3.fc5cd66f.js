(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{331:function(s,t,a){s.exports=a.p+"assets/img/22.dc012513.png"},332:function(s,t,a){s.exports=a.p+"assets/img/23.e481323b.png"},333:function(s,t,a){s.exports=a.p+"assets/img/24.3c60ae4d.png"},334:function(s,t,a){s.exports=a.p+"assets/img/25.046d8377.png"},335:function(s,t,a){s.exports=a.p+"assets/img/26.31961a30.png"},336:function(s,t,a){s.exports=a.p+"assets/img/27.3d3abc87.png"},337:function(s,t,a){s.exports=a.p+"assets/img/28.29961ae6.png"},338:function(s,t,a){s.exports=a.p+"assets/img/29.00e2d840.png"},339:function(s,t,a){s.exports=a.p+"assets/img/30.4d4d3a47.png"},340:function(s,t,a){s.exports=a.p+"assets/img/31.056a9e0c.png"},341:function(s,t,a){s.exports=a.p+"assets/img/32.e4f56f2d.png"},342:function(s,t,a){s.exports=a.p+"assets/img/33.4c84a332.png"},343:function(s,t,a){s.exports=a.p+"assets/img/35.78d1bab3.png"},344:function(s,t,a){s.exports=a.p+"assets/img/36.e463759f.png"},345:function(s,t,a){s.exports=a.p+"assets/img/37.e938e2c9.png"},346:function(s,t,a){s.exports=a.p+"assets/img/38.c5c2e942.png"},347:function(s,t,a){s.exports=a.p+"assets/img/39.c3abb4ce.png"},348:function(s,t,a){s.exports=a.p+"assets/img/40.5a9ef9f4.png"},349:function(s,t,a){s.exports=a.p+"assets/img/41.08bf325d.png"},350:function(s,t,a){s.exports=a.p+"assets/img/42.2243b659.png"},426:function(s,t,a){"use strict";a.r(t);var n=[function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"object-c-category的本质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-c-category的本质","aria-hidden":"true"}},[s._v("#")]),s._v(" Object-C - Category的本质")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("Category的实现原理，以及Category为什么只能加方法不能加属性。")])]),s._v(" "),n("li",[n("strong",[s._v("Category中有load方法吗？load方法是什么时候调用的？load 方法能继承吗？")])]),s._v(" "),n("li",[n("strong",[s._v("load、initialize的区别，以及它们在category重写的时候的调用的次序。")])])]),s._v(" "),n("h2",{attrs:{id:"category的本质"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#category的本质","aria-hidden":"true"}},[s._v("#")]),s._v(" Category的本质")]),s._v(" "),n("p",[s._v("首先我们写一段简单的代码，之后的分析都基于这段代码。")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Presen")]),s._v("类 \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Presen.h")]),s._v("\n#"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Foundation")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Foundation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("h"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n@interface "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSObject")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    int _age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n@end\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Presen.m")]),s._v("\n#"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Preson.h"')]),s._v("\n@implementation "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Preson")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("run\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("@"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Person - run"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n@end\n\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Presen")]),s._v("扩展"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Presen+Test.h")]),s._v("\n#"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Preson.h"')]),s._v("\n@interface "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSCopying")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("abc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n@property "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("assign"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" int age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("setAge"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("age"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n@end\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Presen+Test.m")]),s._v("\n#"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Preson+Test.h"')]),s._v("\n@implementation "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("test\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("abc\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("setAge"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("age\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("age\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n@end\n\n"),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Presen")]),s._v("分类"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Preson+Test2.h")]),s._v("\n#"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Preson.h"')]),s._v("\n@interface "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Test2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n@end\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Preson+Test2.m")]),s._v("\n#"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Preson+Test2.h"')]),s._v("\n@implementation "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Test2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("run\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("@"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Person (Test2) - run"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n@end\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br")])]),n("p",[s._v("我们之前讲到过实例对象的isa指针指向类对象，类对象的isa指针指向元类对象，当p调用run方法时，通过实例对象的isa指针找到类对象，然后在类对象中查找对象方法，如果没有找到，就通过类对象的superclass指针找到父类对象，接着去寻找run方法。")]),s._v(" "),n("p",[n("strong",[s._v("那么当调用分类的方法时，步骤是否和调用对象方法一样呢？")]),s._v("\n分类中的对象方法依然是存储在类对象中的，同本类对象方法在同一个地方，调用步骤也同调用对象方法一样。如果是类方法的话，也同样是存储在元类对象中。\n那么分类方法是如何存储在类对象中的，我们来通过源码看一下分类的底层结构。")]),s._v(" "),n("h2",{attrs:{id:"分类的底层结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分类的底层结构","aria-hidden":"true"}},[s._v("#")]),s._v(" 分类的底层结构")]),s._v(" "),n("p",[n("strong",[s._v("如何验证上述问题？")]),s._v("\n通过查看分类的源码我们可以找到category_t 结构体。")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" category_t "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    const char "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    classref_t cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" method_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("instanceMethods"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对象方法")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" method_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("classMethods"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 类方法")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" protocol_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("protocols"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 协议")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" property_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("instanceProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 属性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Fields below this point are not always present on disk.")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" property_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("_classProperties"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    method_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("methodsForMeta")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bool isMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("isMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" classMethods"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" instanceMethods"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    property_list_t "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("propertiesForMeta")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bool isMeta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" header_info "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("hi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("从源码基本可以看出我们平时使用categroy的方式，对象方法，类方法，协议，和属性都可以找到对应的存储方式。并且我们发现分类结构体中是不存在成员变量的，因此分类中是不允许添加成员变量的。分类中添加的属性并不会帮助我们自动生成成员变量，只会生成get set方法的声明，需要我们自己去实现。\n通过源码我们发现，分类的方法，协议，属性等好像确实是存放在categroy结构体里面的，那么他又是如何存储在类对象中的呢？\n我们来看一下底层的内部方法探寻其中的原理。\n首先我们通过命令行将Preson+Test.m文件转化为c++文件，查看其中的编译过程。")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc Preson+Test.m\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在分类转化为c++文件中可以看出_category_t结构体中，存放着类名，对象方法列表，类方法列表，协议列表，以及属性列表。\n"),n("img",{attrs:{src:a(331),alt:""}}),s._v("\n紧接着，我们可以看到_method_list_t类型的结构体，如下图所示\n"),n("img",{attrs:{src:a(332),alt:""}})]),s._v(" "),n("p",[s._v("上图中我们发现这个结构体 "),n("strong",[n("em",[s._v("OBJC")]),s._v("$"),n("em",[s._v("CATEGORY_INSTANCE_METHODS_Preson")]),s._v("$_Test")]),s._v(" 从名称可以看出是 "),n("strong",[s._v("INSTANCE_METHODS")]),s._v(" 对象方法，并且一一对应为上面结构体内赋值。我们可以看到结构体中存储了方法占用的内存，方法数量，以及方法列表。并且从上图中找到分类中我们实现对应的对象方法，test , setAge, age三个方法\n接下来我们发现同样的_method_list_t类型的类方法结构体，如下图所示\n"),n("img",{attrs:{src:a(333),alt:""}}),s._v("\n同上面对象方法列表一样，这个我们可以看出是类方法列表结构体 "),n("strong",[n("em",[s._v("OBJC")]),s._v("$"),n("em",[s._v("CATEGORY_CLASS_METHODS_Preson")]),s._v("$_Test")]),s._v("，同对象方法结构体相同，同样可以看到我们实现的类方法，abc。")]),s._v(" "),n("p",[n("strong",[s._v("接下来是协议方法列表")]),s._v(" "),n("img",{attrs:{src:a(334),alt:""}}),s._v("\n通过上述源码可以看到先将协议方法通过_method_list_t结构体存储，之后通过_protocol_t结构体存储在 "),n("strong",[n("em",[s._v("OBJC_CATEGORY_PROTOCOLS")]),s._v("$"),n("em",[s._v("Preson")]),s._v("$_Test")]),s._v(" 中同_protocol_list_t结构体一一对应，分别为protocol_count 协议数量以及存储了协议方法的_protocol_t结构体。\n最后我们可以看到属性列表\n"),n("img",{attrs:{src:a(335),alt:""}}),s._v("\n属性列表结构体 "),n("strong",[n("em",[s._v("OBJC")]),s._v("$"),n("em",[s._v("PROP_LIST_Preson")]),s._v("$_Test")]),s._v(" 同_prop_list_t结构体对应，存储属性的占用空间，属性属性数量，以及属性列表，从上图中可以看到我们自己写的age属性。\n最后我们可以看到定义了 "),n("strong",[n("em",[s._v("OBJC")]),s._v("$"),n("em",[s._v("CATEGORY_Preson")]),s._v("$_Test")]),s._v(" 结构体，并且将我们上面着重分析的结构体一一赋值，我们通过两张图片对照一下。\n"),n("img",{attrs:{src:a(336),alt:""}}),s._v(" "),n("img",{attrs:{src:a(337),alt:""}}),s._v("\n上下两张图一一对应，并且我们看到定义_class_t类型的 "),n("strong",[s._v("OBJC_CLASS_$_Preson")]),s._v(" 结构体，最后将 "),n("strong",[n("em",[s._v("OBJC")]),s._v("$"),n("em",[s._v("CATEGORY_Preson")]),s._v("$_Test")]),s._v(" 的cls指针指向 "),n("strong",[s._v("OBJC_CLASS_$_Preson")]),s._v(" 结构体地址。我们这里可以看出，cls指针指向的应该是分类的主类类对象的地址。\n通过以上分析我们发现。分类源码中确实是将我们定义的对象方法，类方法，属性等都存放在catagory_t结构体中。接下来我们在回到runtime源码查看catagory_t存储的方法，属性，协议等是如何存储在类对象中的。\n首先来到runtime初始化函数\n"),n("img",{attrs:{src:a(338),alt:""}})]),s._v(" "),n("p",[s._v("接着我们来到 &map_images读取模块（images这里代表模块），来到map_images_nolock函数中找到_read_images函数，在_read_images函数中我们找到分类相关代码")]),s._v(" "),n("p",[n("img",{attrs:{src:a(339),alt:""}})]),s._v(" "),n("p",[s._v("从上述代码中我们可以知道这段代码是用来查找有没有分类的。通过_getObjc2CategoryList函数获取到分类列表之后，进行遍历，获取其中的方法，协议，属性等。可以看到最终都调用了remethodizeClass(cls);函数。我们来到remethodizeClass(cls);函数内部查看。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(340),alt:""}})]),s._v(" "),n("p",[s._v("通过上述代码我们发现attachCategories函数接收了类对象cls和分类数组cats，如我们一开始写的代码所示，一个类可以有多个分类。之前我们说到分类信息存储在category_t结构体中，那么多个分类则保存在category_list中。")]),s._v(" "),n("p",[n("strong",[s._v("我们来到attachCategories函数内部。")]),s._v(" "),n("img",{attrs:{src:a(341),alt:""}}),s._v("\n上述源码中可以看出，首先根据方法列表，属性列表，协议列表，malloc分配内存，根据多少个分类以及每一块方法需要多少内存来分配相应的内存地址。之后从分类数组里面往三个数组里面存放分类数组里面存放的分类方法，属性以及协议放入对应mlist、proplists、protolosts数组中，这三个数组放着所有分类的方法，属性和协议。\n之后通过类对象的data()方法，拿到类对象的class_rw_t结构体rw，在class结构中我们介绍过，class_rw_t中存放着类对象的方法，属性和协议等数据，rw结构体通过类对象的data方法获取，所以rw里面存放这类对象里面的数据。\n之后分别通过rw调用方法列表、属性列表、协议列表的attachList函数，将所有的分类的方法、属性、协议列表数组传进去，我们大致可以猜想到在attachList方法内部将分类和本类相应的对象方法，属性，和协议进行了合并。")]),s._v(" "),n("p",[n("strong",[s._v("我们来看一下attachLists函数内部。")]),s._v(" "),n("img",{attrs:{src:a(342),alt:""}}),s._v("\n上述源代码中有两个重要的数组\narray()->lists： 类对象原来的方法列表，属性列表，协议列表。\naddedLists：传入所有分类的方法列表，属性列表，协议列表。\nattachLists函数中最重要的两个方法为memmove内存移动和memcpy内存拷贝。")]),s._v(" "),n("p",[n("strong",[s._v("我们先来分别看一下这两个函数")])]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// memmove ：内存移动。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*  __dst : 移动内存的目的地\n*   __src : 被移动的内存首地址\n*   __len : 被移动的内存长度\n*   将__src的内存移动__len块内存到__dst中\n*/")]),s._v("\nvoid    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("memmove")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("__dst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" const void "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("__src"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size_t __len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// memcpy ：内存拷贝。")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*  __dst : 拷贝内存的拷贝目的地\n*   __src : 被拷贝的内存首地址\n*   __n : 被移动的内存长度\n*   将__src的内存移动__n块内存到__dst中\n*/")]),s._v("\nvoid    "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("memcpy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("__dst"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" const void "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("__src"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size_t __n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[n("img",{attrs:{src:a(343),alt:""}})]),s._v(" "),n("p",[s._v("经过memmove方法之后，我们发现，虽然本类的方法，属性，协议列表会分别后移，但是本类的对应数组的指针依然指向原始位置。")]),s._v(" "),n("p",[s._v("memcpy方法之后，内存变化\n"),n("img",{attrs:{src:a(344),alt:""}}),s._v("\n我们发现原来指针并没有改变，至始至终指向开头的位置。并且经过memmove和memcpy方法之后，分类的方法，属性，协议列表被放在了类对象中原本存储的方法，属性，协议列表前面。\n那么为什么要将分类方法的列表追加到本来的对象方法前面呢，这样做的目的是为了保证分类方法优先调用，我们知道当分类重写本类的方法时，会覆盖本类的方法。\n其实经过上面的分析我们知道本质上并不是覆盖，而是优先调用。本类的方法依然在内存中的。我们可以通过打印所有类的所有方法名来查看")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("printMethodNamesOfClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("cls\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    unsigned int "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获得方法数组")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Method")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("methodList "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("class_copyMethodList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 存储方法名")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSMutableString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("methodNames "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSMutableString")]),s._v(" string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 遍历所有的方法")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("int i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("count")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获得方法")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Method")]),s._v(" method "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" methodList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获得方法名")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("methodName "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("NSStringFromSelector")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("method_getName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("method"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 拼接方法名")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("methodNames appendString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("methodName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("methodNames appendString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("@"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('", "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("methodList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 打印方法名")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("@"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%@ - %@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" cls"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" methodNames"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("viewDidLoad "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" viewDidLoad"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    \n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Preson")]),s._v(" alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("p run"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),s._v(" printMethodNamesOfClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("Preson")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("通过下图中打印内容可以发现，调用的是Test2中的run方法，并且Person类中存储着两个run方法。\n"),n("img",{attrs:{src:a(345),alt:""}})]),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[n("strong",[s._v("总结：")])]),s._v(" "),n("ul",[n("li",[s._v("问： Category的实现原理，以及Category为什么只能加方法不能加属性?")]),s._v(" "),n("li",[s._v("答：分类的实现原理是将category中的方法，属性，协议数据放在category_t结构体中，然后将结构体内的方法列表拷贝到类对象的方法列表中。\nCategory可以添加属性，但是并不会自动生成成员变量及set/get方法。因为category_t结构体中并不存在成员变量。通过之前对对象的分析我们知道成员变量是存放在实例对象中的，并且编译的那一刻就已经决定好了。而分类是在运行时才去加载的。那么我们就无法再程序运行时将分类的成员变量中添加到实例对象的结构体中。因此分类中不可以添加成员变量。")])])]),s._v(" "),n("h2",{attrs:{id:"load-和-initialize"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#load-和-initialize","aria-hidden":"true"}},[s._v("#")]),s._v(" load 和 initialize")]),s._v(" "),n("p",[s._v("load方法会在程序启动就会调用，当装载类信息的时候就会调用。\n调用顺序看一下源代码。\n"),n("img",{attrs:{src:a(346),alt:""}}),s._v("\n通过源码我们发现是优先调用类的load方法，之后调用分类的load方法。")]),s._v(" "),n("p",[s._v("我们通过代码验证一下：\n我们添加Student继承Presen类，并添加Student+Test分类，分别重写只+load方法，其他什么都不做通过打印发现\n"),n("img",{attrs:{src:a(347),alt:""}}),s._v("\n确实是优先调用类的load方法之后调用分类的load方法，不过调用类的load方法之前会保证其父类已经调用过load方法。")]),s._v(" "),n("p",[s._v("之后我们为Preson、Student 、Student+Test 添加initialize方法。\n我们知道当类第一次接收到消息时，就会调用initialize，相当于第一次使用类的时候就会调用initialize方法。调用子类的initialize之前，会先保证调用父类的initialize方法。如果之前已经调用过initialize，就不会再调用initialize方法了。当分类重写initialize方法时会先调用分类的方法。但是load方法并不会被覆盖，首先我们来看一下initialize的源码。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(348),alt:""}})]),s._v(" "),n("p",[s._v("上图中我们发现，initialize是通过消息发送机制调用的，消息发送机制通过isa指针找到对应的方法与实现，因此先找到分类方法中的实现，会优先调用分类方法中的实现。")]),s._v(" "),n("p",[s._v("我们再来看一下load方法的调用源码")]),s._v(" "),n("p",[n("img",{attrs:{src:a(349),alt:""}})]),s._v(" "),n("p",[s._v("我们看到load方法中直接拿到load方法的内存地址直接调用方法，不在是通过消息发送机制调用。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(350),alt:""}})]),s._v(" "),n("p",[s._v("我们可以看到分类中也是通过直接拿到load方法的地址进行调用。因此正如我们之前试验的一样，分类中重写load方法，并不会优先调用分类的load方法，而不调用本类中的load方法了。")]),s._v(" "),n("p",[n("strong",[s._v("总结")])]),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("ul",[n("li",[s._v("问：Category中有load方法吗？load方法是什么时候调用的？load 方法能继承吗？")]),s._v(" "),n("li",[s._v("答：Category中有load方法，load方法在程序启动装载类信息的时候就会调用。load方法可以继承。调用子类的load方法之前，会先调用父类的load方法")]),s._v(" "),n("li",[s._v("问：load、initialize的区别，以及它们在category重写的时候的调用的次序。")]),s._v(" "),n("li",[s._v("答：区别在于调用方式和调用时刻\n调用方式：load是根据函数地址直接调用，initialize是通过objc_msgSend调用\n调用时刻：load是runtime加载类、分类的时候调用（只会调用1次），initialize是类第一次接收到消息的时候调用，每一个类只会initialize一次（父类的initialize方法可能会被调用多次）\n调用顺序：先调用类的load方法，先编译那个类，就先调用load。在调用load之前会先调用父类的load方法。分类中load方法不会覆盖本类的load方法，先编译的分类优先调用load方法。initialize先初始化父类，之后再初始化子类。如果子类没有实现+initialize，会调用父类的+initialize（所以父类的+initialize可能会被调用多次），如果分类实现了+initialize，就覆盖类本身的+initialize调用。")])])])])}],e=a(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);r.options.__file="category.md";t.default=r.exports}}]);