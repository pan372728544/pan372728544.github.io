(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{315:function(s,t,a){s.exports=a.p+"assets/img/1.a67b4b12.png"},316:function(s,t,a){s.exports=a.p+"assets/img/2.a3bddcea.png"},317:function(s,t,a){s.exports=a.p+"assets/img/3.69e7524e.png"},318:function(s,t,a){s.exports=a.p+"assets/img/4.2e167c07.png"},319:function(s,t,a){s.exports=a.p+"assets/img/5.487a4e52.png"},320:function(s,t,a){s.exports=a.p+"assets/img/6.987f3986.png"},321:function(s,t,a){s.exports=a.p+"assets/img/7.a3bddcea.png"},322:function(s,t,a){s.exports=a.p+"assets/img/8.52929279.png"},323:function(s,t,a){s.exports=a.p+"assets/img/9.b38bd907.png"},324:function(s,t,a){s.exports=a.p+"assets/img/10.2f3d1c49.png"},325:function(s,t,a){s.exports=a.p+"assets/img/11.cd88faae.png"},326:function(s,t,a){s.exports=a.p+"assets/img/12.4c002c51.png"},327:function(s,t,a){s.exports=a.p+"assets/img/13.b130883d.png"},328:function(s,t,a){s.exports=a.p+"assets/img/14.bae54c77.png"},329:function(s,t,a){s.exports=a.p+"assets/img/15.48e46355.png"},330:function(s,t,a){s.exports=a.p+"assets/img/16.f5748a1d.png"},423:function(s,t,a){"use strict";a.r(t);var n=[function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"object-c-关联对象实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-c-关联对象实现原理","aria-hidden":"true"}},[s._v("#")]),s._v(" Object-C - 关联对象实现原理")]),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[n("strong",[s._v("Category能否添加成员变量？如果可以，如何给Category添加成员变量？")])]),s._v(" "),n("p",[n("strong",[s._v("答：不能直接添加成员变量，但是可以通过runtime的方式间接实现添加成员变量的效果。")])])]),s._v(" "),n("h2",{attrs:{id:"runtime为category动态关联对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#runtime为category动态关联对象","aria-hidden":"true"}},[s._v("#")]),s._v(" RunTime为Category动态关联对象")]),s._v(" "),n("p",[s._v("使用RunTime给系统的类添加属性，首先需要了解对象与属性的关系。我们通过之前的学习知道，对象一开始初始化的时候其属性为nil，给属性赋值其实就是让属性指向一块存储内容的内存，使这个对象的属性跟这块内存产生一种关联。\n那么如果想动态的添加属性，其实就是动态的产生某种关联就好了。而想要给系统的类添加属性，只能通过分类。\n这里给NSObject添加name属性，创建NSObject的分类\n我们可以使用@property给分类添加属性")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[s._v("@"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("property")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nonatomic"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("strong"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("通过探寻Category的本质我们知道，虽然在分类中可以写@property\n添加属性，但是不会自动生成私有属性，也不会生成set,get方法的实现，只会生成set,get的声明，需要我们自己去实现。\n"),n("strong",[s._v("方法一：我们可以通过使用静态全局变量给分类添加属性")])]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("_name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("setName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    _name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" _name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("但是这样_name静态全局变量与类并没有关联，无论对象创建与销毁，只要程序在运行_name变量就存在，并不是真正意义上的属性。")]),s._v(" "),n("p",[n("strong",[s._v("方法二：使用RunTime动态添加属性")])]),s._v(" "),n("p",[s._v("RunTime提供了动态添加属性和获得属性的方法。")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("setName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objc_setAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_RETAIN_NONATOMIC")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSString")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("name\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objc_getAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ol",[n("li",[s._v("动态添加属性")])]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objc_setAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" const void "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" id value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" objc_AssociationPolicy policy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("ul",[n("li",[s._v("参数一：id object : 给哪个对象添加属性，这里要给自己添加属性，用self。")]),s._v(" "),n("li",[s._v("参数二：void * == id key : 属性名，根据key获取关联对象的属性的值，在-objc_getAssociatedObject中通过次key获得属性的值并返回。")]),s._v(" "),n("li",[s._v("参数三：id value : 关联的值，也就是set方法传入的值给属性去保存。")]),s._v(" "),n("li",[s._v("参数四：objc_AssociationPolicy policy : 策略，属性以什么形式保存。")])])]),s._v(" "),n("p",[s._v("有以下几种")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[s._v("typedef "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("OBJC_ENUM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uintptr_t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" objc_AssociationPolicy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_ASSIGN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定一个弱引用相关联的对象")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_RETAIN_NONATOMIC")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关对象的强引用，非原子性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_COPY_NONATOMIC")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关的对象被复制，非原子性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_RETAIN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("01401")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关对象的强引用，原子性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_COPY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("01403")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关的对象被复制，原子性   ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("key值只要是一个指针即可，我们可以传入@selector(name)")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("获得属性")])]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objc_getAssociatedObject")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" const void "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("ul",[n("li",[s._v("参数一：id object : 获取哪个对象里面的关联的属性。")]),s._v(" "),n("li",[s._v("参数二：void * == id key : 什么属性，与objc_setAssociatedObject中的key相对应，即通过key值取出value。")])])]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("移除所有关联对象")])]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("void"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("removeAssociatedObjects\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移除所有关联对象")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("objc_removeAssociatedObjects")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("此时已经成功给NSObject添加name属性，并且NSObject对象可以通过点语法为属性赋值。")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSObject")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("objc "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("NSObject")]),s._v(" alloc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nobjc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" @"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("NSLog")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("@"),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%@"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("objc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v('NSObject *objc = [[NSObject alloc]init];\nobjc.name = @"xx_cc";\nNSLog(@"%@",objc.name);')]),s._v(" "),n("p",[s._v("可以看出关联对象的使用非常简单，接下来我们来探寻关联对象的底层原理")]),s._v(" "),n("h2",{attrs:{id:"关联对象原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关联对象原理","aria-hidden":"true"}},[s._v("#")]),s._v(" 关联对象原理")]),s._v(" "),n("p",[s._v("实现关联对象技术的核心对象有")]),s._v(" "),n("ul",[n("li",[s._v("AssociationsManager - AssociationsHashMap")]),s._v(" "),n("li",[s._v("ObjectAssociationMap")]),s._v(" "),n("li",[s._v("ObjcAssociation\n其中Map同我们平时使用的字典类似。通过key-value一一对应存值。")])]),s._v(" "),n("p",[s._v("对关联对象技术的核心对象有了一个大概的意识，我们通过源码来探寻这些对象的存在形式以及其作用")]),s._v(" "),n("p",[n("strong",[s._v("objc_setAssociatedObject函数")]),s._v("\n来到runtime源码，首先找到objc_setAssociatedObject函数，看一下其实现")]),s._v(" "),n("p",[n("img",{attrs:{src:a(315),alt:""}})]),s._v(" "),n("p",[s._v("我们看到其实内部调用的是_object_set_associative_reference函数，我们来到_object_set_associative_reference函数中")]),s._v(" "),n("p",[n("strong",[s._v("_object_set_associative_reference函数")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(316),alt:""}}),s._v("\n_object_set_associative_reference函数内部我们可以全部找到我们上面说过的实现关联对象技术的核心对象。接下来我们来一个一个看其内部实现原理探寻他们之间的关系。")]),s._v(" "),n("p",[n("strong",[s._v("AssociationsManager")])]),s._v(" "),n("p",[s._v("通过AssociationsManager内部源码发现，AssociationsManager内部有一个AssociationsHashMap对象。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(317),alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("AssociationsHashMap")])]),s._v(" "),n("p",[s._v("我们来看一下AssociationsHashMap内部的源码。\n"),n("img",{attrs:{src:a(318),alt:""}})]),s._v(" "),n("p",[s._v("通过AssociationsHashMap内部源码我们发现AssociationsHashMap继承自unordered_map首先来看一下unordered_map内的源码")]),s._v(" "),n("p",[n("img",{attrs:{src:a(319),alt:""}})]),s._v(" "),n("p",[s._v("从unordered_map源码中我们可以看出_Key和_Tp也就是前两个参数对应着map中的Key和Value，那么对照上面AssociationsHashMap内源码发现_Key中传入的是disguised_ptr_t，_Tp中传入的值则为ObjectAssociationMap*。\n紧接着我们来到ObjectAssociationMap中，上图中ObjectAssociationMap已经标记出，我们发现ObjectAssociationMap中同样以key、Value的方式存储着ObjcAssociation。\n接着我们来到ObjcAssociation中")]),s._v(" "),n("p",[n("img",{attrs:{src:a(320),alt:""}})]),s._v(" "),n("p",[s._v("我们发现ObjcAssociation存储着_policy、_value，而这两个值我们可以发现正是我们调用objc_setAssociatedObject函数传入的值，也就是说我们在调用objc_setAssociatedObject函数中传入的value和policy这两个值最终是存储在ObjcAssociation中的。\n现在我们已经对AssociationsManager、 AssociationsHashMap、 ObjectAssociationMap、ObjcAssociation四个对象之间的关系有了简单的认识，那么接下来我们来细读源码，看一下objc_setAssociatedObject函数中传入的四个参数分别放在哪个对象中充当什么作用。")]),s._v(" "),n("p",[n("strong",[s._v("重新回到_object_set_associative_reference函数实现中")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(321),alt:""}})]),s._v(" "),n("p",[s._v("细读上述源码我们可以发现，首先根据我们传入的value经过acquireValue函数处理获取new_value。acquireValue函数内部其实是通过对策略的判断返回不同的值")]),s._v(" "),n("p",[n("img",{attrs:{src:a(322),alt:""}})]),s._v(" "),n("p",[s._v("之后创建AssociationsManager manager;以及拿到manager内部的AssociationsHashMap即associations。\n之后我们看到了我们传入的第一个参数object\nobject经过DISGUISE函数被转化为了disguised_ptr_t类型的disguised_object。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(323),alt:""}})]),s._v(" "),n("p",[s._v("DISGUISE函数其实仅仅对object做了位运算\n之后我们看到被处理成new_value的value，同policy被存入了ObjcAssociation中。\n而ObjcAssociation对应我们传入的key被存入了ObjectAssociationMap中。\ndisguised_object和ObjectAssociationMap则以key-value的形式对应存储在associations中也就是AssociationsHashMap中。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(324),alt:""}})]),s._v(" "),n("p",[s._v("如果我们value设置为nil的话那么会执行下面的代码")]),s._v(" "),n("p",[n("img",{attrs:{src:a(325),alt:""}})]),s._v(" "),n("p",[s._v("从上述代码中可以看出，如果我们设置value为nil时，就会将关联对象从ObjectAssociationMap中移除。")]),s._v(" "),n("p",[s._v("最后我们通过一张图可以很清晰的理清楚其中的关系")]),s._v(" "),n("p",[n("img",{attrs:{src:a(326),alt:""}})]),s._v(" "),n("p",[s._v("通过上图我们可以总结为：一个实例对象就对应一个ObjectAssociationMap，而ObjectAssociationMap中存储着多个此实例对象的关联对象的key以及ObjcAssociation，为ObjcAssociation中存储着关联对象的value和policy策略。\n由此我们可以知道关联对象并不是放在了原来的对象里面，而是自己维护了一个全局的map用来存放每一个对象及其对应关联属性表格。\n"),n("strong",[s._v("objc_getAssociatedObject函数")]),s._v("\nobjc_getAssociatedObject内部调用的是_object_get_associative_reference")]),s._v(" "),n("p",[n("img",{attrs:{src:a(327),alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("_object_get_associative_reference函数")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(328),alt:""}})]),s._v(" "),n("p",[s._v("从_object_get_associative_reference函数内部可以看出，向set方法中那样，反向将value一层一层取出最后return出去。\n"),n("strong",[s._v("objc_removeAssociatedObjects函数")]),s._v("\nobjc_removeAssociatedObjects用来删除所有的关联对象，objc_removeAssociatedObjects函数内部调用的是_object_remove_assocations函数")]),s._v(" "),n("p",[n("img",{attrs:{src:a(329),alt:""}})]),s._v(" "),n("p",[n("strong",[s._v("_object_remove_assocations函数")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(330),alt:""}})]),s._v(" "),n("p",[s._v("上述源码可以看出_object_remove_assocations函数将object对象向对应的所有关联对象全部删除。")]),s._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),n("p",[n("strong",[s._v("总结：")]),s._v("\n关联对象并不是存储在被关联对象本身内存中，而是存储在全局的统一的一个AssociationsManager中，如果设置关联对象为nil，就相当于是移除关联对象。")])]),s._v(" "),n("p",[s._v("此时我们我们在回过头来看objc_AssociationPolicy policy 参数: 属性以什么形式保存的策略。")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[s._v("typedef "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("OBJC_ENUM")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("uintptr_t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" objc_AssociationPolicy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_ASSIGN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定一个弱引用相关联的对象")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_RETAIN_NONATOMIC")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关对象的强引用，非原子性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_COPY_NONATOMIC")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关的对象被复制，非原子性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_RETAIN")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("01401")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关对象的强引用，原子性")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OBJC_ASSOCIATION_COPY")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("01403")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定相关的对象被复制，原子性   ")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("我们会发现其中只有RETAIN和COPY而为什么没有weak呢？\n总过上面对源码的分析我们知道，object经过DISGUISE函数被转化为了disguised_ptr_t类型的")]),s._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[s._v("disguised_object。\ndisguised_ptr_t disguised_object "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("DISGUISE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("而同时我们知道，weak修饰的属性，当没有拥有对象之后就会被销毁，并且指针置位nil，那么在对象销毁之后，虽然在map中既然存在值object对应的AssociationsHashMap，但是因为object地址已经被置位nil，会造成坏地址访问而无法根据object对象的地址转化为disguised_object了。")])])}],e=a(0),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);r.options.__file="assoc.md";t.default=r.exports}}]);