(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{417:function(e,n,o){"use strict";o.r(n);var s=o(0),p=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("div",{staticClass:"content"},[o("h1",{attrs:{id:"创建私有的spec-repo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#创建私有的spec-repo","aria-hidden":"true"}},[e._v("#")]),e._v(" 创建私有的Spec Repo")]),e._v(" "),o("p",[e._v("一、创建私有的Spec Repo (备注：Git仓库1)")]),e._v(" "),o("p",[e._v("二、创建Pod项目工程，并且有可以访问的项目版本控制地址 (备注：Git仓库2)")]),e._v(" "),o("p",[e._v("三、创建并提交MyLibPod库的podspec文件到私有Spec Repo仓库")]),e._v(" "),o("p",[e._v("四、使用制作好的Pod")]),e._v(" "),o("p",[e._v("说明：在以上步骤一、二中需要创建两个Git创库:\n1、Git仓库1的作用类似于CocoaPods的官方spec repo专门存放podspec\n具体可以参考:CocoaPods官方源、Specs;\n2、Git仓库2的是私有库的源码Git版本控制地址。")]),e._v(" "),o("h2",{attrs:{id:"一、创建私有的spec-repo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一、创建私有的spec-repo","aria-hidden":"true"}},[e._v("#")]),e._v(" 一、创建私有的Spec Repo")]),e._v(" "),o("p",[e._v("Spec Repo 是所有的Pods的一个索引，是所有公开的Pods 的podspec 文件的一个仓库，其实就是一个部署在服务器的Git仓库，当你使用CocoaPods 后它会被Clone到本地的 ~/.cocoapods/repos 目录下,大概的文件目录如下:")]),e._v(" "),o("pre",[o("code",[e._v(".\n├── MySpecs\n│   ├── MyLib\n│   │   └── 0.1.1\n│   │       └── MyLib.podspec\n│   └── README.md\n└── master\n    ├── CocoaPods-version.yml\n    ├── README.md\n    └── Specs\n        ├── !ProtoCompiler\n        │   ├── 3.0.0\n        │   ├── 3.0.0-beta-3.1\n        │   └── 3.0.0-beta-4\n        ├── !ProtoCompiler-gRPCPlugin\n        │   ├── 0.14.0\n        │   ├── 1.0.0\n        │   ├── 1.0.0-pre1\n        │   ├── 1.0.0-pre1.1\n        │   └── 1.0.0-pre1.2\n")])]),e._v(" "),o("p",[e._v("Tip：~/.cocoapods/repos文件是一个隐藏目录，在Mac 上默认是看不到隐藏目录的，但是我们可以通过「终端」应用程序打开。在Terminal中执行以下命令显示隐藏文件:")]),e._v(" "),o("pre",[o("code",[e._v("$ defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder \n")])]),e._v(" "),o("p",[e._v("执行以下命令恢复隐藏文件:")]),e._v(" "),o("pre",[o("code",[e._v("$ defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder \n")])]),e._v(" "),o("p",[e._v("上文的目录树形图就是我电脑的本地的 ~/.cocoapods/repos目录，其中master就是官方的Sepc Repo,跟master同目录级别的MySpecs目录就是我自己的创建的私有Sepc Repo。")]),e._v(" "),o("p",[e._v("1、首先在coding.net上创建一个MySpecs项目,当然你也是可以在公司内网创建的。\n2、然后在Terminal中执行以下命令")]),e._v(" "),o("pre",[o("code",[e._v("# pod repo add [Private Repo Name] [GitHub HTTPS clone URL]\n$ pod repo add MySpecs https://git.coding.net/kensla/MySpecs.git\n")])]),e._v(" "),o("p",[e._v("注意：这个Git 仓库地址要换成你自己的创建的 Specs git 地址！！！\n成功后会在~/.cocoapods/repos目录下就能看到MySpecs了，至此，第一步创建私有\nSpec Repo就完成了。")]),e._v(" "),o("h2",{attrs:{id:"二、创建pod项目工程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#二、创建pod项目工程","aria-hidden":"true"}},[e._v("#")]),e._v(" 二、创建Pod项目工程")]),e._v(" "),o("p",[e._v("1.创建Pod项目工程\n首先，在coding.net上创建一个MyLib项目,当然你也是可以在公司内网创建的。\n然后，使用Cocoapods提供的一个Using Pod Lib Create 工具创建一个工程。")]),e._v(" "),o("p",[e._v("在Terminal中执行cd进入要创建项目的目录然后 执行以下命令：")]),e._v(" "),o("p",[e._v("二、创建Pod项目工程")]),e._v(" "),o("p",[e._v("1.创建Pod项目工程\n首先，在coding.net上创建一个MyLib项目,当然你也是可以在公司内网创建的。\n然后，使用Cocoapods提供的一个Using Pod Lib Create 工具创建一个工程。")]),e._v(" "),o("p",[e._v("在Terminal中执行cd进入要创建项目的目录然后 执行以下命令：")]),e._v(" "),o("p",[e._v("二、创建Pod项目工程")]),e._v(" "),o("p",[e._v("1.创建Pod项目工程\n首先，在coding.net上创建一个MyLib项目,当然你也是可以在公司内网创建的。\n然后，使用Cocoapods提供的一个Using Pod Lib Create 工具创建一个工程。")]),e._v(" "),o("p",[e._v("在Terminal中执行cd进入要创建项目的目录然后 执行以下命令：")]),e._v(" "),o("pre",[o("code",[e._v("#pod lib create [项目名]\n$pod lib create MyLib\n")])]),e._v(" "),o("p",[e._v("接着在Terminal控制台会输出：")]),e._v(" "),o("pre",[o("code",[e._v("Cloning `https://github.com/CocoaPods/pod-template.git` into `MyLib`.\nConfiguring MyLib template.\n------------------------------\nTo get you started we need to ask a few questions, this should only take a minute.\nIf this is your first time we recommend running through with the guide: \n- http://guides.cocoapods.org/making/using-pod-lib-create.html\n( hold cmd and double click links to open in a browser. )\nWhat language do you want to use?? [ Swift / ObjC ]\n> ObjC\n")])]),e._v(" "),o("p",[e._v("第一个问题是问你选择Swift还是Objc构建项目。此教程 选的是ObjC")]),e._v(" "),o("pre",[o("code",[e._v("Would you like to include a demo application with your library? [ Yes / No ]\n> Yes\n")])]),e._v(" "),o("p",[e._v("第二个问题问你是否需要创建一个Demo项目，此教程选的是Yes")]),e._v(" "),o("pre",[o("code",[e._v("Which testing frameworks will you use? [ Specta / Kiwi / None ]\n> Specta\n")])]),e._v(" "),o("p",[e._v("第三个问题让你是否选择一个测试框架，此教程选 Specta")]),e._v(" "),o("pre",[o("code",[e._v("Would you like to do view based testing? [ Yes / No ]\n > Yes\n")])]),e._v(" "),o("p",[e._v("第四个问题是否基于View测试，选Yes")]),e._v(" "),o("pre",[o("code",[e._v("What is your class prefix?\n> ZYK\n")])]),e._v(" "),o("p",[e._v("第五个问题是询问 类的前缀，设为ZYK")]),e._v(" "),o("p",[e._v("设置完成后控制台输出:")]),e._v(" "),o("pre",[o("code",[e._v("Running pod install on your new library.\n\n[!] No `Podfile' found in the project directory.\n\nAce! you're ready to go!\n\nWe will start you off by opening your project in Xcode\n\nopen 'MyLib/Example/MyLib.xcworkspace'\n\nThe file /Users/ken/Desktop/工作/MyLib/Example/MyLib.xcworkspace  does not exist.\n\nTo learn more about the template see `https://github.com/CocoaPods/ pod-template.git`.\n\nTo learn more about creating a new pod, see \n`http://guides.cocoapods.org/making/making-a-cocoapod`.\n")])]),e._v(" "),o("p",[e._v("成功后会在目录中创建好一个MyLib工程，结构如下：")]),e._v(" "),o("pre",[o("code",[e._v("Mylib\n├── Example ** 这个是第二个问题的 Demo项目 \n│   ├── MyLib\n│   │   ├── Images.xcassets\n│   │   │   ├── AppIcon.appiconset\n│   │   │   │   └── Contents.json\n│   │   │   └── LaunchImage.launchimage\n│   │   │       └── Contents.json\n│   │   ├── Main.storyboard\n│   │   ├── MyLib-Info.plist\n│   │   ├── MyLib-Prefix.pch\n│   │   ├── ZYKAppDelegate.h\n│   │   ├── ZYKAppDelegate.m\n│   │   ├── ZYKViewController.h\n│   │   ├── ZYKViewController.m\n│   │   ├── en.lproj\n│   │   │   └── InfoPlist.strings\n│   │   └── main.m\n│   ├── MyLib.xcodeproj\n│   │   ├── project.pbxproj\n│   │   ├── project.xcworkspace\n│   │   │   └── contents.xcworkspacedata\n│   │   └── xcshareddata\n│   │       └── xcschemes\n│   │           └── MyLib-Example.xcscheme\n│   ├── Podfile\n│   └── Tests\n│       ├── Tests-Info.plist\n│       ├── Tests-Prefix.pch\n│       ├── Tests.m\n│       └── en.lproj\n│           └── InfoPlist.strings\n├── LICENSE\n├── MyLib\n│   ├── Assets\n│   └── Classes\n│       └── ReplaceMe.m **注意存放你自己实现的库相关代码！！！**\n├── MyLib.podspec  ** 库的podspec文件，这个是下一步需要重点配置的文件 ！！！**\n├── README.md\n└── _Pods.xcodeproj -> Example/Pods/Pods.xcodeproj\n")])]),e._v(" "),o("p",[e._v("2、添加实现代码\n├── MyLib\n│   ├── Assets\n│   └── Classes\n│       └── ReplaceMe.m "),o("strong",[e._v("注意存放你自己实现的库相关代码！！！")])]),e._v(" "),o("p",[e._v("在本教程中我在上面的Classes文件目录添加了 MyLib.h、UIColor+Fetch.h、UIColor+Fetch.m 等几个文件。现在目录结构如下:")]),e._v(" "),o("pre",[o("code",[e._v(".\n├── Example\n│   ├── Build\n│   │   ├── Intermediates\n│   │   │   ├── MyLib.build\n│   │   │   ├── Pods.build\n│   │   │   └── PrecompiledHeaders\n│   │   └── Products\n│   │       └── Debug-iphoneos\n│   ├── MyLib\n│   │   ├── Images.xcassets\n│   │   │   ├── AppIcon.appiconset\n│   │   │   └── LaunchImage.launchimage\n│   │   ├── Main.storyboard\n│   │   ├── MyLib-Info.plist\n│   │   ├── MyLib-Prefix.pch\n│   │   ├── ZYKAppDelegate.h\n│   │   ├── ZYKAppDelegate.m\n│   │   ├── ZYKViewController.h\n│   │   ├── ZYKViewController.m\n│   │   ├── en.lproj\n│   │   │   └── InfoPlist.strings\n│   │   └── main.m\n│   ├── MyLib.xcodeproj\n│   │   ├── project.pbxproj\n│   │   ├── project.xcworkspace\n│   │   │   ├── contents.xcworkspacedata\n│   │   │   └── xcuserdata\n│   │   ├── xcshareddata\n│   │   │   └── xcschemes\n│   │   └── xcuserdata\n│   │       └── zhongyuanke.xcuserdatad\n│   ├── MyLib.xcworkspace\n│   │   ├── contents.xcworkspacedata\n│   │   └── xcuserdata\n│   │       └── zhongyuanke.xcuserdatad\n│   ├── Podfile\n│   ├── Podfile.lock\n│   ├── Pods\n│   │   ├── Expecta\n│   │   │   ├── Expecta\n│   │   │   ├── LICENSE\n│   │   │   └── README.md\n│   │   ├── Expecta+Snapshots\n│   │   │   ├── EXPMatchers+FBSnapshotTest.h\n│   │   │   ├── EXPMatchers+FBSnapshotTest.m\n│   │   │   ├── ExpectaObject+FBSnapshotTest.h\n│   │   │   ├── ExpectaObject+FBSnapshotTest.m\n│   │   │   ├── LICENSE.md\n│   │   │   └── README.md\n│   │   ├── FBSnapshotTestCase\n│   │   │   ├── FBSnapshotTestCase\n│   │   │   ├── LICENSE\n│   │   │   └── README.md\n│   │   ├── Headers\n│   │   ├── Local\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ Podspecs\n│   │   │   └── MyLib.podspec.json\n│   │   ├── Manifest.lock\n│   │   ├── MyLib\n│   │   │   ├── LICENSE\n│   │   │   ├── MyLib\n│   │   │   └── README.md\n│   │   ├── Pods.xcodeproj\n│   │   │   ├── project.pbxproj\n│   │   │   ├── project.xcworkspace\n│   │   │   └── xcuserdata\n│   │   ├── Specta\n│   │   │   ├── LICENSE\n│   │   │   ├── README.md\n│   │   │   └── Specta\n│   │   └── Target\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ Support\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ Files\n│   │       ├── Expecta\n│   │       ├── Expecta+Snapshots\n│   │       ├── FBSnapshotTestCase\n│   │       ├── MyLib\n│   │       ├── Pods-MyLib_Example\n│   │       ├── Pods-MyLib_Tests\n│   │       └── Specta\n│   └── Tests\n│       ├── Tests-Info.plist\n│       ├── Tests-Prefix.pch\n│       ├── Tests.m\n│       └── en.lproj\n│           └── InfoPlist.strings\n├── LICENSE\n├── MyLib\n│   ├── Assets\n│   └── Classes     ## 把你的库代码放在这个Classes文件夹 ！！！##\n│       ├── MyLib.h\n│       └── UIColor+Category\n│           ├── UIColor+Fetch.h \n│           └── UIColor+Fetch.m\n├── MyLib.podspec\n├── RE.md\n├── README.md\n└── _Pods.xcodeproj -> Example/Pods/Pods.xcodeproj\n")])]),e._v(" "),o("p",[e._v("3.开发模式下测试pod库的代码\n打开Example工程目录Podfile文件：")]),e._v(" "),o("pre",[o("code",[e._v("pod 'MyLib', :path => '../' # 指定路径\n#pod 'MyLib', :podspec => '../MyLib.podspec'  # 指定podspec文件\n")])]),e._v(" "),o("p",[e._v("然后在Example工程目录下执行 pod update命令安装依赖，打开项目工程，可以看到库文件都被加载到Pods子项目中了\n不过它们并没有在Pods目录下，而是跟测试项目一样存在于Development Pods/MyLib中，这是因为我们是在本地测试，而没有把podspec文件添加到Spec Repo中的缘故。测试库文件没有问题,接着我们需要执行第4步")]),e._v(" "),o("p",[e._v("4.提交Pod库到Git仓库2\n在Terminal中执行 cd进入MyLib项目根目录然后，执行以下命令：")]),e._v(" "),o("pre",[o("code",[e._v('$ git add .\n$ git commit -s -m "初始化MyLib 库"\n$ git remote add origin git@git.coding.net:kensla/MyLib.git           #添加远端仓库\n$ git push origin master     #提交到远端仓库\n$ git tag -m "first release" "0.1.0" #打上标签，这个很重要\n$ git push --tags     #推送tag到远端仓库\n')])]),e._v(" "),o("p",[e._v("到这里，成功提交到远程 Git仓库2，MyLib Pod 库就初步完成了代码实现")]),e._v(" "),o("h2",{attrs:{id:"三、创建并提交mylibpod库的podspec文件到私有spec-repo仓库"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三、创建并提交mylibpod库的podspec文件到私有spec-repo仓库","aria-hidden":"true"}},[e._v("#")]),e._v(" 三、创建并提交MyLibPod库的podspec文件到私有Spec Repo仓库")]),e._v(" "),o("p",[e._v("1.配置MyLibPod库的podspec 文件")]),e._v(" "),o("pre",[o("code",[e._v("#\n# Be sure to run `pod lib lint MyLib.podspec' to ensure this is a\n# valid spec before submitting.\n#\n# Any lines starting with a # are optional, but their use is encouraged\n# To learn more about a Podspec see http://guides.cocoapods.org/syntax/podspec.html\n#\n\nPod::Spec.new do |s|\n  #名称\n  s.name             = 'MyLib'\n  #版本号\n  s.version          = '0.1.0'\n  #简介\n  s.summary          = '这个是我的私有库项目Demo.'\n\n# This description is used to generate tags and improve search results.\n#   * Think: What does it do? Why did you write it? What is the focus?\n#   * Try to keep it short, snappy and to the point.\n#   * Write the description between the DESC delimiters below.\n#   * Finally, don't worry about the indent, CocoaPods strips it!\n\n  s.description      = <<-DESC\n  这个是教程的 私有库项目 学习Demo.\n                       DESC\n  #主页,这里要填写可以访问到的地址，不然验证不通过\n  s.homepage         = 'https://coding.net/u/kensla'\n\n  # s.screenshots     = 'www.example.com/screenshots_1', 'www.example.com/screenshots_2'\n\n  #开源协议\n\n  s.license          =   { :type => 'MIT', :file => 'LICENSE' }\n\n  #作者\n  s.author           = { 'kensla' => '604217454@qq.com' }\n\n  #项目地址，这里不支持ssh的地址，验证不通过，只支持HTTP和HTTPS，最好使用HTTPS。\n  #这里的s.source须指向存放源代码的链接地址，而不是托管spec文件的repo地址\n  s.source           = { :git => 'https://git.coding.net/kensla/MyLib.git', :tag => \"0.1.0\" }\n\n  #s.social_media_url = 'http://weibo.com/kensla'\n\n  #支持的平台及版本\n  s.ios.deployment_target = '7.0'\n\n  #代码源文件地址，**/*表示Classes目录及其子目录下所有文件，如果有多个目录下则\n  #用逗号分开，如果需要在项目中分组显示，这里也要做相应的设置\n\n  s.source_files = \"MyLib/Classes/**/*\"\n\n  #资源文件地址\n  # s.resource_bundles = {\n  #   'MyLib' => ['MyLib/Assets/*.png']\n  # }\n\n  #公开头文件地址\n  #s.public_header_files = 'MyLib/Classes/DDCommonBase.h'\n\n  #所需的framework，多个用逗号隔开\n  s.frameworks = 'UIKit'\n\n  #依赖关系，该项目所依赖的其他库，如果有多个需要填写多个s.dependency\n  # s.dependency 'AFNetworking', '~> 2.3'\nend\n")])]),e._v(" "),o("p",[e._v("打开MyLib工程目录下的MyLib.podspec 文件并参考上面的说明配置好相关选项。podspec更多配置请参考:官方文档")]),e._v(" "),o("p",[e._v("2.编辑完MyLib.podspec文件后，需要验证一下这个MyLib.podspec文件是否可用")]),e._v(" "),o("p",[e._v("在Terminal中执行cd进入MyLib项目根目录然后，执行以下命令：")]),e._v(" "),o("pre",[o("code",[e._v("$ pod lib lint\n")])]),e._v(" "),o("p",[e._v("当你看到 Terminal 中输出：")]),e._v(" "),o("pre",[o("code",[e._v(" -> MyLib (0.1.0)\n\nMyLib passed validation.\n")])]),e._v(" "),o("p",[e._v("表示这个MyLib.podspec 验证通过，是一个符合CocoaPods规则的配置文件。")]),e._v(" "),o("p",[e._v("3.本地测试MyLib.podspec文件\n打开Example工程目录Podfile文件修改下pod 的引用")]),e._v(" "),o("pre",[o("code",[e._v("  #pod 'MyLib', :path => '../' # 指定路径\n  pod 'MyLib', :podspec => '../MyLib.podspec'  # 指定podspec文件\n")])]),e._v(" "),o("p",[e._v("然后在Example工程目录下执行pod update命令安装依赖，打开项目工程，现在可以看到库文件都被加载到Pods子项目中了")]),e._v(" "),o("p",[e._v("4.向Spec Repo提交podspec\n测试库文件没有问题我们就把MyLib.podspec提交到远程Spec Repo仓库中，就是本文开头说的Git仓库1\n在Terminal中执行 cd进入MyLib项目根目录然后，执行以下命令：")]),e._v(" "),o("pre",[o("code",[e._v("# pod repo push [Repo名] [podspec 文件名字]\n$ pod repo push MySpecs MyLib.podspec  \n")])]),e._v(" "),o("p",[e._v("如果提交成功，在Terminal会输出：")]),e._v(" "),o("pre",[o("code",[e._v("Validating spec\n -> MyLib (0.1.0)\n\nUpdating the `MySpecs' repo\n\nAlready up-to-date.\n\nAdding the spec to the `MySpecs' repo\n\n - [No change] MyLib (0.1.0)\n\nPushing the `MySpecs' repo\n\nUsername for 'https://git.coding.net': kensla\nPassword for 'https://kensla@git.coding.net': \nTo https://git.coding.net/kensla/MySpecs.git\n   59b080c..b44123d  master -> master\n")])]),e._v(" "),o("p",[e._v("表示提交成功了！这个组件库就添加到我们的私有Spec Repo中了，可以进入到~/.cocoapods/repos/MySpecs目录下查看")]),e._v(" "),o("pre",[o("code",[e._v(".\n├── MyLib\n│   └── 0.1.0\n│       └── MyLib.podspec\n└── README.md\n")])]),e._v(" "),o("p",[e._v("再去看我们的Spec Repo远端仓库 也就是Git仓库1，也有了一次提交，这个podspec也已经被Push上去了。")]),e._v(" "),o("p",[e._v("至此，我们的这个组件库就已经制作添加完成了，使用pod search命令就可以查到我们自己的库了.\n在Terminal中执行 pod search MyLib")]),e._v(" "),o("pre",[o("code",[e._v("-> MyLib (0.1.0)\n这个是我的私有库项目Demo.\npod 'MyLib', '~> 0.1.0'\n- Homepage: https://coding.net/u/kensla\n- Source:   https://git.coding.net/kensla/MyLib.git\n- Versions: 0.1.0 [MySpecs repo]\n")])]),e._v(" "),o("p",[e._v("四、使用制作好的Pod")]),e._v(" "),o("p",[e._v("在完成这一系列步骤之后，我们就可以在正式项目中使用这个私有的Pod了只需要在项目的Podfile里增加以下一行代码即可,\n在正式项目的Podfile 里添加私有Spec Repo")]),e._v(" "),o("pre",[o("code",[e._v("#私有Spec Repo\nsource 'https://git.coding.net/kensla/DDSpecs.git' \npod 'MyLib', '~> 0.1.0'\n")])]),e._v(" "),o("p",[e._v("然后执行pod update，更新库依赖，然后打开项目可以看到，我们自己的库文件已经出现在Pods子项目中的Pods子目录下了，而不再是Development Pods。")])])}],!1,null,null,null);p.options.__file="spec.md";n.default=p.exports}}]);